import asyncio
import random
import logging
import re

from datetime import datetime

from aiogram import Bot, Dispatcher
from aiogram import executor, types, exceptions
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils import markdown

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from loguru import logger
from zodiac_sign import get_zodiac_sign

from texts import random_texts_year, study_menu_texts
from texts import welcome_text, to_connect, start_texts, study_text, astro_advices
from keyboards import Markups
from bf_texts import bf_sending, SendingData
from src.common import settings
from src.models import db, db_sendings

from data.skip_100_lead import skip_100_leads


class States(StatesGroup):
    get_user_date_for_horoscope_year = State()
    back_state = State()


storage = RedisStorage2(db=settings.redis_db, pool_size=40)
bot = Bot(settings.tg_token)
dp = Dispatcher(bot, storage=storage)
ADMIN_IDS = (1188441997, 791363343)
markups = Markups()

available_codes = list(range(15908, 531284))  # –ö–æ–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–±–æ—Ä–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
horoscopes_padejs = {'–û–≤–µ–Ω': '–û–≤–Ω–∞', '–¢–µ–ª–µ—Ü—å': '–¢–µ–ª—å—Ü—è', '–ë–ª–∏–∑–Ω—é–∫–∏': '–ë–ª–∏–∑–Ω—é–∫—ñ–≤', '–†–∞–∫': '–†–∞–∫—ñ–≤',
                      '–õ–µ–≤': '–õ–µ–≤–∞', '–î—ñ–≤–∞': '–î—ñ–≤–∏', '–¢–µ—Ä–µ–∑–∏': '–¢–µ—Ä–µ–∑—ñ–≤', '–°–∫–æ—Ä–ø—ñ–æ–Ω': '–°–∫–æ—Ä–ø—ñ–æ–Ω–∞',
                      '–°—Ç—Ä—ñ–ª–µ—Ü—å': '–°—Ç—Ä—ñ–ª—å—Ü—è', '–ö–æ–∑–µ—Ä—ñ–≥': '–ö–æ–∑–µ—Ä–æ–≥–∞', '–í–æ–¥–æ–ª—ñ–π': '–í–æ–¥–æ–ª—ñ—è', '–†–∏–±–∏': '–†–∏–±'}
language = 'ukr_UKR'

astro_advice_photo = "AgACAgIAAxkBAALh-GTb8V2CjeboPMbxCqT_X_RF0xuXAAJa0jEb1fvhSqtfMMzRcXDlAQADAgADeQADMAQ"
astrology_is_photo = "AgACAgIAAxkBAALh-WTb8XC7Kgec83nd-cBmaeAKBvQdAAJc0jEb1fvhSqFeL9QHtyBIAQADAgADeQADMAQ"
lune_horoscope_photo = "AgACAgIAAxkBAALh-mTb8X2CG2p51lcOPHSET0LG8zEKAAI2yzEbEB7gSuc24irJBkw_AQADAgADeQADMAQ"
year_horoscope_photo = "AgACAgIAAxkBAALh-2Tb8Yi05TG0ZUHqoyjfbLjwOHKzAAJe0jEb1fvhSiVBtqT4X0zYAQADAgADeQADMAQ"
BF_PEOPLE = [791363343, 923202245, 1633990660, 1188441997, 627568042]


def get_value_of_arg(arg: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç=–∑–Ω–∞—á–µ–Ω–∏–µ"""
    return arg.split('=')[-1]


def generate_apply_code():
    code = ''.join(map(lambda num: str(num), [random.choice((4, 5, 6, 7, 8, 9)) for _ in range(6)]))
    return code


@dp.message_handler(lambda message: message.from_user.id == 1188441997, content_types=['photo'], state='*')
async def get_photo_from_me(message: types.Message, state: FSMContext):
    print(message.photo[-1].file_id)


@dp.message_handler(lambda message: message.from_user.id == 1188441997, content_types=['document'], state='*')
async def get_photo_from_me(message: types.Message, state: FSMContext):
    print(message.document.file_id)


@dp.message_handler(commands=['start'], state='*')
@logger.catch
async def start_mes(message: types.Message, state: FSMContext) -> None:
    await state.finish()
    await message.answer_photo(types.InputFile('data/photos/lune_horoscope.jpg'), welcome_text, reply_markup=markups.start_mrkup, parse_mode='html')
    await db.registrate_if_not_exists(message.from_user.id)


@dp.message_handler(lambda message: message.from_user.id in BF_PEOPLE, commands=['bf_stat'], state='*')
async def get_bf_stat(message: types.Message):
    stat = await db_sendings.get_bf_stat()
    await message.answer(stat)


@dp.callback_query_handler(lambda call: call.data == 'delete_msg', state='*')
async def del_msg(call: types.CallbackQuery, state: FSMContext):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –º—É—Å–æ—Ä
    """
    try:
        await call.message.delete()
    except exceptions.MessageCantBeDeleted:
        await call.message.delete_reply_markup()
        await call.answer('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')


@dp.message_handler(lambda message: message.text == 'üëà–û–±—Ä–∞—Ç–Ω–æ', state="*")
@logger.catch
async def back_from_getting_horoscope_year(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer_photo(types.InputFile('data/photos/lune_horoscope.jpg'), welcome_text, reply_markup=markups.start_mrkup, parse_mode='html')


@dp.message_handler(lambda message: message.text == 'üëà–ù–∞–∑–∞–¥', state='*')
@logger.catch
async def back_from_get_user_date_guide(message: types.Message, state: FSMContext):
    await message.answer(study_text, reply_markup=markups.study_mrkup)


@dp.message_handler(lambda message: message.text == '‚ú®–û—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ 2024 —Ä—ñ–∫', state='*')
@logger.catch
async def get_horoscope_on_2023_year(message: types.Message, state: FSMContext):
    user_date = await db.check_if_user_has_birth_date(message.from_user.id)
    if not bool(user_date):
        await bot.send_message(message.chat.id,
                               text='üôè–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ—Ä–æ—Å–∫–æ–ø—É –Ω–∞ —Ä—ñ–∫, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º—ñ –¥–¥.–º–º.–≥–≥–≥–≥',
                               reply_markup=markups.to_menu_mrkup, parse_mode='html')
        await state.set_state(States.get_user_date_for_horoscope_year.state)
    else:
        day, month = user_date.split('.')[:2]
        zodiac = get_zodiac_sign(day, month, language='ukr_UKR')
        user_choose = await db.get_horoscope_text_index(message.from_user.id)
        await bot.send_message(message.chat.id, text=generate_beautiful_text('year', zodiac, user_date, user_choose),
                               reply_markup=markups.to_menu_mrkup,
                               parse_mode='html')
        await state.set_state(States.back_state.state)
        asyncio.create_task(send_text_with_inline_btn(message.chat.id))


@dp.message_handler(lambda message: message.text in start_texts, state='*')
@logger.catch
async def which_horoscope(message: types.Message, state) -> None:
    if message.text == '‚ú®–û—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø':
        user_date = await db.check_if_user_has_birth_date(message.from_user.id)
        if not bool(user_date):
            await bot.send_message(message.chat.id,
                                   text='üôè–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ—Ä–æ—Å–∫–æ–ø—É –Ω–∞ —Ä—ñ–∫, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º—ñ –¥–¥.–º–º.–≥–≥–≥–≥',
                                   reply_markup=markups.to_menu_mrkup, parse_mode='html')
            await state.set_state(States.get_user_date_for_horoscope_year.state)
        else:
            day, month = user_date.split('.')[:2]
            zodiac = get_zodiac_sign(day, month, language='ukr_UKR')
            user_choose = await db.get_horoscope_text_index(message.from_user.id)
            await message.answer_photo(types.InputFile('data/photos/year_horoscope.jpg'),
                                       caption=generate_beautiful_text('year', zodiac, user_date, user_choose),
                                       reply_markup=markups.to_menu_mrkup,
                                       parse_mode='html')
            await state.set_state(States.back_state.state)
            asyncio.create_task(send_text_with_inline_btn(message.chat.id))

    elif message.text == 'üìú–û—Å–≤—ñ—Ç–Ω—î –º–µ–Ω—é':
        await message.answer(study_text, reply_markup=markups.study_mrkup)


async def generate_astro_advice(user_id):
    start_of_text = '‚ú®–ê—Å—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–∞ —Ä–∞–¥–∞ –Ω–∞ –¥–µ–Ω—å:'
    advice = astro_advices[await db.get_user_advice_step(user_id)]
    now_time = datetime.now()
    tomorrow_time = (now_time + timedelta(days=1))
    necessary_time = datetime(year=tomorrow_time.year, month=tomorrow_time.month, day=tomorrow_time.day, hour=0,
                              minute=0, second=0)
    left_time_for_update = round(((necessary_time - now_time).total_seconds() / 60 / 60), 1)
    end_of_text = f"‚ù§Ô∏è–î–æ –ø–æ—è–≤–∏ –Ω–æ–≤–æ—ó –∞—Å—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–æ—ó —Ä–∞–¥–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—è {left_time_for_update}—á."
    main_text = f'{start_of_text}\n\n{advice}\n\n{end_of_text}'
    return main_text


@dp.message_handler(lambda message: message.text in study_menu_texts or message.text in ('üôè–û—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø', '‚ú®–û—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Ä—ñ–∫', '‚ú®–ê—Å—Ç—Ä–æ-—Ä–∞–¥–∞ –Ω–∞ –¥–µ–Ω—å'), state='*')
async def study_menu_dispatcher(message: types.Message, state: FSMContext):
    if message.text in ('üôè–û—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø', '‚ú®–û—Ç—Ä–∏–º–∞—Ç–∏ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Ä—ñ–∫'):
        user_date = await db.check_if_user_has_birth_date(message.from_user.id)
        if not bool(user_date):
            await bot.send_message(message.chat.id,
                                   text='üôè–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ—Ä–æ—Å–∫–æ–ø—É –Ω–∞ —Ä—ñ–∫, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º—ñ –¥–¥.–º–º.–≥–≥–≥–≥',
                                   reply_markup=markups.to_menu_mrkup, parse_mode='html')
            await state.set_state(States.get_user_date_for_horoscope_year.state)
        else:
            day, month = user_date.split('.')[:2]
            zodiac = get_zodiac_sign(day, month, language='ukr_UKR')
            user_choose = await db.get_horoscope_text_index(message.from_user.id)
            await message.answer_photo(types.InputFile('data/photos/year_horoscope.jpg'),
                                       caption=generate_beautiful_text('year', zodiac, user_date, user_choose),
                                       reply_markup=markups.to_menu_mrkup,
                                       parse_mode='html')
            await state.set_state(States.back_state.state)
            asyncio.create_task(send_text_with_inline_btn(message.chat.id))

    elif message.text == '‚ú®–ê—Å—Ç—Ä–æ-—Ä–∞–¥–∞ –Ω–∞ –¥–µ–Ω—å':
        text = await generate_astro_advice(message.from_user.id)
        await message.answer_photo(types.InputFile('data/photos/astro_advice.JPG'), text, reply_markup=markups.mrkup_for_every_study_btn)
    elif message.text == '‚ú®–©–æ —Ç–∞–∫–µ –∞—Å—Ç—Ä–æ–ª–æ–≥—ñ—è?':
        await message.answer_photo(types.InputFile('data/photos/astrology_is.JPG'), study_menu_texts[message.text],
                                   reply_markup=markups.mrkup_for_every_study_btn)
    else:
        text = study_menu_texts[message.text]
        await message.answer(text, reply_markup=markups.mrkup_for_every_study_btn)


@dp.message_handler(lambda message: message.from_user.id in ADMIN_IDS, state='*', commands=['admin'])
@logger.catch
async def admin_menu(message: types.Message, state: FSMContext) -> None:
    await bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markups.admin_mrkup)


@dp.callback_query_handler(lambda call: call.from_user.id in ADMIN_IDS and call.data.startswith('Admin'), state='*')
@logger.catch
async def admin_calls(call: types.CallbackQuery, state: FSMContext) -> None:
    action = '_'.join(call.data.split('_')[1:])
    if action == 'Users_Total':
        await call.message.edit_text(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {await db.get_count_all_users()}',
                                     reply_markup=markups.back_admin_mrkup)

    elif action == 'Users_For_TODAY':
        await call.message.edit_text(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {await db.users_for_today()}',
                                     reply_markup=markups.back_admin_mrkup)

    # elif action == 'Dates_For_TODAY':
    #     await call.message.edit_text(
    #         text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–≤–µ–ª–∏ –¥–∞—Ç—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {db.get_count_dates_for_today()}',
    #         reply_markup=markups.back_admin_mrkup)

    elif action == 'BACK':
        await call.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markups.admin_mrkup)


def generate_beautiful_text(horoscope_type, zodiac, user_date, user_choose):
    main_text = '‚≠êÔ∏è–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ '
    main_text += '2024 –≥–æ–¥'
    horoscope_text = random_texts_year[user_choose]
    main_text += f' –¥–ª—è {markdown.hbold(horoscopes_padejs[zodiac])} | –¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {markdown.hbold(user_date)}\n\n{horoscope_text}' + to_connect
    return main_text


async def send_analyze_of_answers(chat_id, text_to_send):
    await asyncio.sleep(7)
    await bot.send_photo(chat_id, photo=types.InputFile('data/photos/year_horoscope.jpg'), caption=text_to_send, parse_mode='html')
    asyncio.create_task(send_text_with_inline_btn(chat_id))


async def send_text_with_inline_btn(chat_id):
    apply_code = await db.get_apply_code(chat_id)
    if apply_code is None:
        apply_code = generate_apply_code()
        await db.set_apply_code(chat_id, str(apply_code))
    await asyncio.sleep(2)  # 12106
    text = f"{markdown.hbold('üîÜ–¢—ñ–ª—å–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ')} –¥–∏–ø–ª–æ–º–æ–≤–∞–Ω–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥ –°–æ—Ñ—ñ {markdown.hbold('–ø—ñ–¥–≥–æ—Ç—É—î –¥–ª—è –í–∞—Å –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π')} –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫.\n\nüìé–í–∞—à –∫–æ–¥–æ–≤–∏–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {markdown.hcode(apply_code)}\n –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥—É –°–æ—Ñi –∫–æ–¥–æ–≤–∏–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ —Ç–∞ –º—ñ—Å—Ü–µ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–∞ –æ—Å–æ–±–∏—Å—Ç–∏–π –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å ‚Äî @Ezoteric_Soulüëà\n\n{markdown.hbold('‚ùóÔ∏è–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –º—ñ—Å—Ü—å –æ–±–º–µ–∂–µ–Ω–∞')}"
    await bot.send_message(chat_id, text, parse_mode='html',
                           reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(
                               text='–ù–∞–ø–∏—Å–∞—Ç–∏ –∞—Å—Ç—Ä–æ–ª–æ–≥—É', url=f'https://t.me/Ezoteric_Soul')]]))


@dp.message_handler(state=States.get_user_date_for_horoscope_year)
@logger.catch
async def choose_zodiac_year(message: types.Message, state: FSMContext) -> None:
    if re.fullmatch(r'\d{1,2}\.\d{1,2}\.\d{4}', message.text):
        day, month, year = message.text.split('.')
        if 0 < int(day) < 32 and 0 < int(month) < 13 and int(year) < 2023:
            await db.update_user_birth_date(message.from_user.id, message.text)
            zodiac = get_zodiac_sign(day, month, language='ukr_UKR')
            user_choose_year = random.choice(range(3, len(random_texts_year)))
            await db.set_horoscope_text_index(message.from_user.id, user_choose_year)
            await message.answer('ü™Ñ–û–±—Ä–æ–±–ª—è—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...', reply_markup=markups.to_menu_mrkup)
            await state.set_state(States.back_state.state)
            asyncio.create_task(send_analyze_of_answers(message.chat.id,
                                                        generate_beautiful_text('year', zodiac, message.text,
                                                                                user_choose_year)))
        else:
            await message.answer('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–∞—Ç–∞!\n'
                                 'üôè–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ—Ä–æ—Å–∫–æ–ø—É –Ω–∞ —Ä—ñ–∫, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º—ñ –¥–¥.–º–º.–≥–≥–≥–≥',
                                 reply_markup=markups.to_menu_mrkup)
    else:
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.\n'
                             'üôè–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ—Ä–æ—Å–∫–æ–ø—É –Ω–∞ —Ä—ñ–∫, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º—ñ –¥–¥.–º–º.–≥–≥–≥–≥',
                             reply_markup=markups.to_menu_mrkup)

async def sending_messages_2h():
    while True:
        await asyncio.sleep(7)

        text_for_2h_autosending = 'üôå–î–æ—Ä–æ–≥—ñ –º–æ—ó, —è –ø–æ—Å–ø—ñ—à–∞—é –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ —Ç–µ, —â–æ –∑–∞–ª–∏—à–∏–ª–æ—Å—è –≤—Å—å–æ–≥–æ 6 –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –º—ñ—Å—Ü—å –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —Ü—å–æ–≥–æ —Ä–æ–∫—É\n\n–ù–µ –ø—Ä–æ“ë–∞–≤—Ç–µ —Å–≤—ñ–π —à–∞–Ω—Å, –Ω–∞–ø–∏—à—ñ—Ç—å –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–≤—ñ –°–æ—Ñ—ñ —Å–ª–æ–≤–æ ""–©–∞—Å—Ç—è"" –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - @Ezoteric_Soulüëà\n\nüßö –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø—É –º–∏ –∑–º–æ–∂–µ–º–æ –≤–∏—è–≤–∏—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∂–∏—Ç—Ç—î–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ —É –≤—Å—ñ—Ö —Å—Ñ–µ—Ä–∞—Ö —Ç–∞ –∑–Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ —à–ª—è—Ö–∏ –¥–ª—è —ó—Ö –≤–∏—Ä—ñ—à–µ–Ω–Ω—è.'
        mrkup = types.InlineKeyboardMarkup()
        mrkup.add(types.InlineKeyboardButton("–í–ø—É—Å—Ç–∏—Ç–∏ —â–∞—Å—Ç—è‚ú®", url="https://t.me/Ezoteric_Soul"))

        users = await db_sendings.get_users_2h_autosending()
        for user in users:
            try:
                await bot.send_message(user, text_for_2h_autosending, parse_mode='html', reply_markup=mrkup)
                logger.info(f'ID: {user}. Got 2h_autosending')
                await db_sendings.mark_got_2h_autosending(user)
                await asyncio.sleep(0.2)
            except (exceptions.BotBlocked, exceptions.UserDeactivated, exceptions.ChatNotFound):
                logger.error(f'ID: {user}. DELETED')
                await db.delete_user(user)
            except Exception as ex:
                logger.error(f'got error: {ex}')


async def sending_message_24_h():
    while True:
        await asyncio.sleep(12)

        text_autosending_24h = "üåñ–ó–¥—Ä–∞—Å—Ç—É–π—Ç–µ, —Å—å–æ–≥–æ–¥–Ω—ñ –ú—ñ—Å—è—Ü—å –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –Ω–∞–π—Å–ø—Ä–∏—è—Ç–ª–∏–≤—ñ—à—ñ–π —Ñ–∞–∑—ñ, –ø—Ä–∏ —è–∫—ñ–π –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à —Ç–æ—á–Ω–∏–π —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–∏–π —Ä–æ–∑–±—ñ—Ä –∑–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ—é –∫–∞—Ä—Ç–æ—é. –ù–∞ —á–µ—Å—Ç—å —Ü—ñ—î—ó –ø–æ–¥—ñ—ó - –∞—Å—Ç—Ä–æ–ª–æ–≥ –°–æ—Ñ—ñ –ø—ñ–¥–≥–æ—Ç—É—î –¥–ª—è –í–∞—Å –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ä–æ–∑–±—ñ—Ä.\n\nüßò‚ôÄ–£ –Ω—å–æ–º—É –í–∏ –¥—ñ–∑–Ω–∞—î—Ç–µ—Å—è –ø—Ä–æ —Ç–µ, —è–∫—É –¥–æ—Ä–æ–≥—É —Ä–∞–¥—è—Ç—å –≤–∏–±—Ä–∞—Ç–∏ –∑—ñ—Ä–∫–∏, —è–∫ –º–æ–∂–Ω–∞ –≤–∏—Ä—ñ—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –∂–∏—Ç—Ç—î–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ —Ç–∞ —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–¥–∞–ª—å—à–∏—Ö –Ω–µ–≤–¥–∞—á —É —Å–≤–æ—î–º—É –∂–∏—Ç—Ç—î–≤–æ–º—É —à–ª—è—Ö—É\n\n–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –¥–∞—Ç—É —Ç–∞ –º—ñ—Å—Ü–µ —Å–≤–æ–≥–æ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - @Ezoteric_Soul üëà\n\nüîÆ–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏—Ö –º—ñ—Å—Ü—å –æ–±–º–µ–∂–µ–Ω–∞!"
        mrkup = types.InlineKeyboardMarkup()
        mrkup.add(types.InlineKeyboardButton("üîÜ–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–∏–π —Ä–æ–∑–±—ñ—Ä", url="https://t.me/Ezoteric_Soul"))

        users = await db_sendings.get_users_24h_autosending()
        for user in users:
            try:
                await bot.send_message(user, text_autosending_24h, parse_mode='html', reply_markup=mrkup)
                logger.info(f'ID: {user}. Got autosending_24h')
                await db_sendings.mark_got_24h_autosending(user)
                await asyncio.sleep(0.2)
            except (exceptions.BotBlocked, exceptions.UserDeactivated, exceptions.ChatNotFound):
                logger.error(f'ID: {user}. DELETED')
                await db.delete_user(user)
            except Exception as ex:
                logger.error(f'got error: {ex}')

async def sending_message_48_h():
    while True:
        await asyncio.sleep(12)

        text_autosending_48h = f"üßö‚Äç‚ôÇÔ∏è–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, –≤ {markdown.hbold('—Ü–µ–π —á—É–¥–æ–≤–∏–π –¥–µ–Ω—å')} —á–∏—Å–ª–æ –º–æ—ó—Ö {markdown.hbold('—É—á–Ω—ñ–≤')}, —è–∫—ñ –æ—Ç—Ä–∏–º–∞–ª–∏ {markdown.hbold('–∞—Å—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é')} —Ü—å–æ–≥–æ —Ä–æ–∫—É - { markdown.hbold('–ø–µ—Ä–µ–≤–∏—â–∏–ª–æ 1.500 –æ—Å—ñ–±')}\n\n–ù–∞ —á–µ—Å—Ç—å —Ç–∞–∫–æ–≥–æ {markdown.hbold('–≤–∞–∂–ª–∏–≤–æ—ó –ø–æ–¥—ñ—ó')}, —è —Ö–æ—á—É –∑—Ä–æ–±–∏—Ç–∏ {markdown.hbold('–í–∞–º –ø–æ–¥–∞—Ä—É–Ω–æ–∫')} —ñ –∑—Ä–æ–±–∏—Ç–∏ {markdown.hbold( '–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–∏–π —Ä–æ–∑–±—ñ—Äüéâ')}\n\n–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è {markdown.hbold('–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ —Ä–æ–∑–±–æ—Ä—É')} ‚Äî {markdown.hbold('–Ω–∞–ø–∏—à—ñ—Ç—å')} –º–µ–Ω—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {markdown.hbold('–¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è')} ‚Äî @Ezoteric_Soulüëà\n\nü™Ñ{markdown.hbold('–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ä–æ–∑–±—ñ—Ä —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–µ—Ä—à–∏—Ö 10 –Ω–∞–ø–∏—Å–∞–≤—à–∏—Ö')}"
        mrkup = types.InlineKeyboardMarkup()
        mrkup.add(types.InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫üéÅ", url="https://t.me/Ezoteric_Soul"))

        users_for_autosending_1 = await db_sendings.get_users_48h_autosending()
        for user in users_for_autosending_1:
            try:
                await bot.send_message(user, text_autosending_48h, parse_mode='html', reply_markup=mrkup)
                logger.info(f'ID: {user}. Got autosending_text_48h')
                await db_sendings.mark_got_48h_autosending(user)
                await asyncio.sleep(0.2)
            except (exceptions.BotBlocked, exceptions.UserDeactivated):
                logger.error(f'ID: {user}. DELETED')
                await db.delete_user(user)
            except Exception as ex:
                logger.error(f'got error: {ex}')


async def sending_message_72h():
    while True:
        await asyncio.sleep(12)

        text = f'ü™ê–ó–¥—Ä–∞—Å—Ç—É–π—Ç–µ, —Ö–æ—á—É –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏, —â–æ –ø—ñ—Å–ª—è {markdown.hbold("–í–∞—à–∏—Ö —á–∏—Å–ª–µ–Ω–Ω–∏—Ö –ø—Ä–æ—Ö–∞–Ω—å")} - —è {markdown.hbold("–≤—ñ–¥–∫—Ä–∏–≤–∞—é –¥—Ä—É–≥–∏–π –ø–æ—Ç—ñ–∫")} —ñ {markdown.hbold("—Ö–æ—á—É –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ 15-—Ç–∏") } —â–∞—Å–ª–∏–≤—á–∏–∫–∞–º {markdown.hbold("–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥—ñ—á–Ω–∏–π —Ä–æ–∑–±—ñ—Ä")}\n\nüôå–Ø–∫—â–æ –í–∏ {markdown.hbold("–≥–æ—Ç–æ–≤—ñ –∑–Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö —É —Å–≤–æ—î–º—É –∂–∏—Ç—Ç—ñ")}, —Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å {markdown.hbold("–¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –º–µ–Ω—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - @Ezoteric_Soulüëà")}'
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–±—ñ—Äüî±", url="https://t.me/Ezoteric_Soul"))

        users_for_autosending_1 = await db_sendings.get_users_72h_autosending()
        for user in users_for_autosending_1:
            try:
                await bot.send_message(user, text, parse_mode='html', reply_markup=kb)
                logger.info(f'ID: {user}. Got autosending_text_72h')
                await db_sendings.mark_got_72h_autosending(user)
                await asyncio.sleep(0.2)
            except (exceptions.BotBlocked, exceptions.UserDeactivated):
                logger.exception(f'ID: {user}. DELETED')
                await db.delete_user(user)
            except Exception as ex:
                logger.error(f'got error: {ex}')


@dp.callback_query_handler(lambda call: call.data == 'black_friday?get_gift', state='*')
async def send_black_friday_gift(call: types.CallbackQuery, state: FSMContext):
    chat_member = await bot.get_chat_member(-1002059782974, call.from_user.id)
    if chat_member.is_chat_member():
        await call.message.answer_document('BQACAgIAAxkBAAFqLvZlShPPCzUoYZKx5RVGi3ibd2iT6wACHTUAAofGUUq9ksqFXr6WfjME')
    else:
        await call.answer("–£–≤—ñ–π–¥—ñ—Ç—å –≤ –º–∞—Ä–∞—Ñ–æ–Ω, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ ‚ù§Ô∏è")


async def bf_task(id_: int, sending: SendingData, db_func, skip_if_chat_member: bool = False, only_for_chat_member: bool = False):
    try:

        if skip_if_chat_member or only_for_chat_member:
            chat_member = await bot.get_chat_member(-1002059782974, id_)
            if chat_member.is_chat_member() and skip_if_chat_member:
                return 'skip'
            elif not chat_member.is_chat_member() and only_for_chat_member:
                return 'skip'
            name = chat_member.user.first_name
        else:
            name = None

        if id_ in skip_100_leads:
            return 'skip'

        text = await sending.get_text(bot, id_, name)
        if sending.photo is not None:
            await bot.send_photo(id_, types.InputFile(sending.photo), caption=text, reply_markup=sending.kb,
                                 parse_mode='html', disable_notification=True)
        else:
            await bot.send_message(id_, text=text, reply_markup=sending.kb,
                                   parse_mode='html', disable_web_page_preview=True)
        await db_func(id_)
        sending.count += 1
        logger.success(f'{id_} sending_{sending.uid} text')

    except (exceptions.BotBlocked, exceptions.UserDeactivated, exceptions.ChatNotFound):
        logger.exception(f'ID: {id_}. DELETED')
        await db.delete_user(id_)
    except Exception as e:
        logger.error(f'BUG: {e}')
    else:
        return 'success'
    return 'false'


async def sending_newsletter():
    white_day = 24
    now_time = datetime.now()

    if now_time.day > white_day:
        return

    while True:
        await asyncio.sleep(2)
        if now_time.day == white_day and now_time.hour >= 17:
            try:
                tasks = []
                users = [1371617744] + list(await db_sendings.get_users_for_sending_newsletter())
                print(len(users))
                for user in users:
                    logger.info(f"–ü—ã—Ç–∞—é—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ - {user}")
                    try:
                        _s = bf_sending
                        # if _s.count >= 80000:
                        #     break
                        tasks.append(asyncio.create_task(bf_task(user, _s, db_sendings.set_newsletter)))
                        if len(tasks) > 40:
                            print(len(tasks))
                            r = await asyncio.gather(*tasks, return_exceptions=False)
                            await asyncio.wait(tasks)
                            await asyncio.sleep(0.4)
                            logger.info(f"{r.count('success')=}", f"{r.count('false')=}", f"{r.count('skip')=}")
                            tasks.clear()

                    except Exception as ex:
                        logger.error(f'–û—à–∏–±–∫–∞ –≤ –º–∞–ª–æ–º –±–ª–æ–∫–µ sending: {ex}')
                    finally:
                        await asyncio.sleep(0.03)
            except Exception as ex:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ–ª—å—à–æ–º –±–ª–æ–∫–µ sending - {ex}")
            finally:
                await bot.send_message(1371617744, f"ERROR —Ä–∞—Å—Å—ã–ª–∫–∞ —Å—Ç–æ–ø–Ω—É–ª–∞—Å—å.")
                logger.info("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")


async def on_startup(_):
    asyncio.create_task(sending_newsletter())
    asyncio.create_task(sending_messages_2h())
    asyncio.create_task(sending_message_24_h())
    asyncio.create_task(sending_message_48_h())
    asyncio.create_task(sending_message_72h())


async def update_db_advices_step_func():
    await db.update_users_advice_step()


try:
    a_logger = logging.getLogger('apscheduler.scheduler')
    a_logger.setLevel(logging.DEBUG)
    scheduler = AsyncIOScheduler({'apscheduler.timezone': 'Europe/Moscow'})
    scheduler.add_job(trigger='cron', hour='00', minute='00', func=update_db_advices_step_func)
    scheduler.start()
    executor.start_polling(dp, on_startup=on_startup)
finally:
    stop = True
    logger.info("–ë–æ—Ç –∑–∞–∫–æ–Ω—á–∏–ª —Ä–∞–±–æ—Ç—É")
